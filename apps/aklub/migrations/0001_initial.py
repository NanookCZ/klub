# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import datetime
import aklub.models
import stdimage.models
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency('auth.User'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountStatements',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('import_date', models.DateField(default=datetime.date(2014, 9, 5))),
                ('csv_file', models.FileField(upload_to=b'account-statements')),
                ('date_from', models.DateField(null=True, blank=True)),
                ('date_to', models.DateField(null=True, blank=True)),
            ],
            options={
                'ordering': ['-import_date'],
                'verbose_name': 'Account Statement',
                'verbose_name_plural': 'Account Statements',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AutomaticCommunication',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=50, null=True, verbose_name='Name')),
                ('method', models.CharField(max_length=30, verbose_name='Method', choices=[(b'email', 'Email'), (b'phonecall', 'Phonecall'), (b'mail', 'Mail'), (b'personal', 'Personal'), (b'internal', 'Internal')])),
                ('subject', models.CharField(max_length=100, verbose_name='Subject')),
                ('subject_en', models.CharField(max_length=100, null=True, verbose_name='English subject', blank=True)),
                ('template', models.TextField(help_text='Template can contain variable substitutions like addressment, name, variable symbol etc.', max_length=10000, verbose_name='Template')),
                ('template_en', models.TextField(max_length=10000, null=True, verbose_name='English template', blank=True)),
                ('only_once', models.BooleanField(default=True, help_text='If checked, never send this communication twice to one user', verbose_name='Only once')),
                ('dispatch_auto', models.BooleanField(default=False, help_text='If checked, the communication might be dispatched by the system (e.g. an email sent) as soon as condition becomes true, without any further action from the administrator. If not, the communication is created, but the administrator must send it manually.', verbose_name='Dispatch auto')),
            ],
            options={
                'verbose_name': 'Automatic Communication',
                'verbose_name_plural': 'Automatic Communications',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateField(verbose_name='Created')),
                ('terminated', models.DateField(null=True, verbose_name='Terminated', blank=True)),
                ('name', models.CharField(help_text='Choose some unique name for this campaign', max_length=100, verbose_name='Name', blank=True)),
                ('description', models.TextField(help_text='Description of this campaign', max_length=3000, verbose_name='Description', blank=True)),
                ('acquisition_campaign', models.BooleanField(default=False, verbose_name='Acquisition campaign')),
                ('real_yield', models.FloatField(help_text='Use if yield differs from counted value', null=True, verbose_name='Real yield', blank=True)),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Communication',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('method', models.CharField(max_length=30, verbose_name='Method', choices=[(b'email', 'Email'), (b'phonecall', 'Phonecall'), (b'mail', 'Mail'), (b'personal', 'Personal'), (b'internal', 'Internal')])),
                ('type', models.CharField(default=b'individual', max_length=30, verbose_name='Type of communication', choices=[(b'mass', 'Mass'), (b'auto', 'Automatic'), (b'individual', 'Individual')])),
                ('date', models.DateTimeField(verbose_name='Date')),
                ('subject', models.CharField(help_text='The topic of this communication', max_length=100, verbose_name='Subject')),
                ('summary', models.TextField(help_text='Text or summary of this communication', max_length=10000, verbose_name='Text')),
                ('attachment', models.FileField(upload_to=b'communication-attachments', null=True, verbose_name='Attachment', blank=True)),
                ('note', models.TextField(help_text='Internal notes about this communication', max_length=3000, verbose_name='Notes', blank=True)),
                ('send', models.BooleanField(default=False, help_text='Request sending or resolving this communication. For emails, this means that the email will be immediatelly sent to the user. In other types of communications, someone must handle this manually.', verbose_name='Send / Handle')),
                ('dispatched', models.BooleanField(default=False, help_text='Was this message already sent, communicated and/or resolved?', verbose_name='Dispatched / Done')),
            ],
            options={
                'ordering': ['date'],
                'verbose_name': 'Communication',
                'verbose_name_plural': 'Communications',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200, null=True, verbose_name='Name of condition')),
                ('operation', models.CharField(max_length=30, verbose_name='Operation', choices=[(b'Logical', ((b'and', b'and'), (b'or', b'or'), (b'nor', b'nor'))), (b'Comparison', ((b'=', b'is equal to'), (b'!=', b'is not equal to'), (b'like', b'is like'), (b'>', b'greater than'), (b'<', b'less than')))])),
                ('variable', models.CharField(choices=[(b'User.DoesNotExist', b'User.DoesNotExist'), (b'User.GENDER', b'User.GENDER'), (b'User.LANGUAGE', b'User.LANGUAGE'), (b'User.MultipleObjectsReturned', b'User.MultipleObjectsReturned'), (b'User.REGULAR_PAYMENT_FREQUENCIES', b'User.REGULAR_PAYMENT_FREQUENCIES'), (b'User.SOURCE', b'User.SOURCE'), (b'User.active', b'User.active'), (b'User.activity_points', b'User.activity_points'), (b'User.additional_information', b'User.additional_information'), (b'User.addressment', b'User.addressment'), (b'User.addressment_on_envelope', b'User.addressment_on_envelope'), (b'User.annotations', b'User.annotations'), (b'User.campaigns', b'User.campaigns'), (b'User.city', b'User.city'), (b'User.club_card_available', b'User.club_card_available'), (b'User.club_card_dispatched', b'User.club_card_dispatched'), (b'User.communications', b'User.communications'), (b'User.country', b'User.country'), (b'User.different_correspondence_address', b'User.different_correspondence_address'), (b'User.email', b'User.email'), (b'User.exceptional_membership', b'User.exceptional_membership'), (b'User.expected_date_of_first_payment', b'User.expected_date_of_first_payment'), (b'User.expected_regular_payment_date', b'User.expected_regular_payment_date'), (b'User.extra_money', b'User.extra_money'), (b'User.field_of_work', b'User.field_of_work'), (b'User.firstname', b'User.firstname'), (b'User.get_language_display', b'User.get_language_display'), (b'User.get_next_by_registered_support', b'User.get_next_by_registered_support'), (b'User.get_previous_by_registered_support', b'User.get_previous_by_registered_support'), (b'User.get_regular_frequency_display', b'User.get_regular_frequency_display'), (b'User.get_sex_display', b'User.get_sex_display'), (b'User.get_source_display', b'User.get_source_display'), ('User.id', 'User.id'), (b'User.is_direct_dialogue', b'User.is_direct_dialogue'), (b'User.knows_us_from', b'User.knows_us_from'), (b'User.language', b'User.language'), (b'User.last_payment', b'User.last_payment'), (b'User.last_payment_date', b'User.last_payment_date'), (b'User.mail_communications_count', b'User.mail_communications_count'), (b'User.make_tax_confirmation', b'User.make_tax_confirmation'), (b'User.monthly_regular_amount', b'User.monthly_regular_amount'), (b'User.no_upgrade', b'User.no_upgrade'), (b'User.note', b'User.note'), (b'User.number_of_payments', b'User.number_of_payments'), (b'User.objects', b'User.objects'), (b'User.old_account', b'User.old_account'), (b'User.other_benefits', b'User.other_benefits'), (b'User.other_support', b'User.other_support'), (b'User.payment_set', b'User.payment_set'), (b'User.payments', b'User.payments'), (b'User.person_name', b'User.person_name'), (b'User.profile_picture', b'User.profile_picture'), (b'User.profile_picture', b'User.profile_picture'), (b'User.profile_text', b'User.profile_text'), (b'User.public', b'User.public'), (b'User.recruiter', b'User.recruiter'), (b'User.recruiter', b'User.recruiter'), (b'User.registered_support', b'User.registered_support'), (b'User.registered_support_date', b'User.registered_support_date'), (b'User.regular_amount', b'User.regular_amount'), (b'User.regular_frequency', b'User.regular_frequency'), (b'User.regular_frequency_td', b'User.regular_frequency_td'), (b'User.regular_payments', b'User.regular_payments'), (b'User.regular_payments_delay', b'User.regular_payments_delay'), (b'User.regular_payments_info', b'User.regular_payments_info'), (b'User.requires_action', b'User.requires_action'), (b'User.sex', b'User.sex'), (b'User.source', b'User.source'), (b'User.street', b'User.street'), (b'User.surname', b'User.surname'), (b'User.telephone', b'User.telephone'), (b'User.title_after', b'User.title_after'), (b'User.title_before', b'User.title_before'), (b'User.total_contrib', b'User.total_contrib'), (b'User.variable_symbol', b'User.variable_symbol'), (b'User.verified', b'User.verified'), (b'User.verified_by', b'User.verified_by'), (b'User.verified_by', b'User.verified_by'), (b'User.why_supports', b'User.why_supports'), (b'User.wished_information', b'User.wished_information'), (b'User.wished_tax_confirmation', b'User.wished_tax_confirmation'), (b'User.wished_welcome_letter', b'User.wished_welcome_letter'), (b'User.zip_code', b'User.zip_code'), (b'User.last_payment.BIC', b'User.last_payment.BIC'), (b'User.last_payment.DoesNotExist', b'User.last_payment.DoesNotExist'), (b'User.last_payment.KS', b'User.last_payment.KS'), (b'User.last_payment.MultipleObjectsReturned', b'User.last_payment.MultipleObjectsReturned'), (b'User.last_payment.SS', b'User.last_payment.SS'), (b'User.last_payment.TYPE_OF_PAYMENT', b'User.last_payment.TYPE_OF_PAYMENT'), (b'User.last_payment.VS', b'User.last_payment.VS'), (b'User.last_payment.account', b'User.last_payment.account'), (b'User.last_payment.account_name', b'User.last_payment.account_name'), (b'User.last_payment.account_statement', b'User.last_payment.account_statement'), (b'User.last_payment.account_statement', b'User.last_payment.account_statement'), (b'User.last_payment.amount', b'User.last_payment.amount'), (b'User.last_payment.bank_code', b'User.last_payment.bank_code'), (b'User.last_payment.bank_name', b'User.last_payment.bank_name'), (b'User.last_payment.date', b'User.last_payment.date'), (b'User.last_payment.done_by', b'User.last_payment.done_by'), (b'User.last_payment.get_next_by_date', b'User.last_payment.get_next_by_date'), (b'User.last_payment.get_previous_by_date', b'User.last_payment.get_previous_by_date'), (b'User.last_payment.get_type_display', b'User.last_payment.get_type_display'), ('User.last_payment.id', 'User.last_payment.id'), (b'User.last_payment.objects', b'User.last_payment.objects'), (b'User.last_payment.paired_with_expected', b'User.last_payment.paired_with_expected'), (b'User.last_payment.person_name', b'User.last_payment.person_name'), (b'User.last_payment.type', b'User.last_payment.type'), (b'User.last_payment.user', b'User.last_payment.user'), (b'User.last_payment.user', b'User.last_payment.user'), (b'User.last_payment.user_identification', b'User.last_payment.user_identification'), (b'action', b'action')], max_length=30, blank=True, help_text='Value or variable on left-hand side', null=True, verbose_name='Variable')),
                ('value', models.CharField(help_text='Value or variable on right-hand side', max_length=50, null=True, verbose_name='Value', blank=True)),
                ('as_filter', models.BooleanField(default=False, help_text='Determines whether this condition is available as a filterin the table of Users', verbose_name='Display as filter?')),
                ('on_dashboard', models.BooleanField(default=False, help_text='Determines whether this condition is available on dashboard', verbose_name='Display on dashboard?')),
                ('conds', models.ManyToManyField(related_name=b'conds_rel', null=True, verbose_name='Conditions', to='aklub.Condition', blank=True)),
            ],
            options={
                'verbose_name': 'Condition',
                'verbose_name_plural': 'Conditions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('amount', models.FloatField(verbose_name='amount')),
                ('item', models.CharField(max_length=300, verbose_name='item', blank=True)),
                ('campaign', models.ForeignKey(related_name=b'expenses', verbose_name='campaign', to='aklub.Campaign')),
            ],
            options={
                'verbose_name': 'expense',
                'verbose_name_plural': 'expenses',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MassCommunication',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=50, null=True, verbose_name='Name')),
                ('date', models.DateField(default=None, verbose_name='Date')),
                ('method', models.CharField(max_length=30, verbose_name='Method', choices=[(b'email', 'Email'), (b'phonecall', 'Phonecall'), (b'mail', 'Mail'), (b'personal', 'Personal'), (b'internal', 'Internal')])),
                ('subject', models.CharField(max_length=100, verbose_name='Subject')),
                ('subject_en', models.CharField(help_text='English version of the subject. If empty, English speaking users will not receive this communication.', max_length=100, null=True, verbose_name='English subject', blank=True)),
                ('template', models.TextField(help_text='Template can contain variable substitutions like addressment, name, variable symbol etc.', max_length=10000, null=True, verbose_name='Template', blank=True)),
                ('template_en', models.TextField(max_length=10000, null=True, verbose_name='English template', blank=True)),
                ('attachment', models.FileField(upload_to=b'mass-communication-attachments', null=True, verbose_name='Attachment', blank=True)),
                ('attach_tax_confirmation', models.BooleanField(default=False, help_text='If this field is checked, the tax confirmation for last year is appended to the message.', verbose_name='Attach tax confirmation')),
                ('note', models.TextField(help_text='Note', max_length=500, null=True, verbose_name='note', blank=True)),
            ],
            options={
                'verbose_name': 'Mass Communication',
                'verbose_name_plural': 'Mass Communications',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateField(verbose_name='Date of payment')),
                ('amount', models.PositiveIntegerField(help_text='Amount of money in the main used curency', verbose_name='Amount')),
                ('account', models.CharField(help_text='Bank account from which money was received', max_length=100, verbose_name=b'Account', blank=True)),
                ('bank_code', models.CharField(help_text='Code of bank from which money was received', max_length=30, verbose_name='Bank code', blank=True)),
                ('VS', models.CharField(help_text='Variable symbol', max_length=30, verbose_name='VS', blank=True)),
                ('SS', models.CharField(help_text='Specific symbol', max_length=30, verbose_name='SS', blank=True)),
                ('KS', models.CharField(help_text='Constant symbol', max_length=30, verbose_name='CS', blank=True)),
                ('BIC', models.CharField(help_text='BIC', max_length=30, null=True, verbose_name='BIC', blank=True)),
                ('user_identification', models.CharField(help_text='Sender identification string on the account statement', max_length=30, verbose_name='Sender identification', blank=True)),
                ('type', models.CharField(blank=True, help_text='Type of payment', max_length=200, verbose_name='Type', choices=[(b'bank-transfer', 'Bank transfer'), (b'cash', 'In cash'), (b'expected', 'Expected payment')])),
                ('done_by', models.CharField(help_text="This is a column imported from the account statements. It's purpose is not clear. It has been usually blank on the account statement we have received so far.", max_length=500, verbose_name='Done by', blank=True)),
                ('account_name', models.CharField(max_length=200, verbose_name='Account name', blank=True)),
                ('bank_name', models.CharField(max_length=500, verbose_name='Bank name', blank=True)),
                ('account_statement', models.ForeignKey(blank=True, to='aklub.AccountStatements', null=True)),
            ],
            options={
                'ordering': ['-date'],
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Recruiter',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('registered', models.DateField(default=datetime.datetime(2014, 9, 5, 11, 49, 17, 637704), verbose_name='Registered')),
                ('recruiter_id', models.PositiveIntegerField(unique=True, verbose_name='Recruiter ID')),
                ('firstname', models.CharField(max_length=40, verbose_name='First name')),
                ('surname', models.CharField(max_length=40, verbose_name='Surname')),
                ('email', models.CharField(max_length=40, verbose_name='Email', blank=True)),
                ('telephone', models.CharField(max_length=30, verbose_name='Telephone', blank=True)),
                ('note', models.TextField(max_length=3000, verbose_name='Note', blank=True)),
                ('problem', models.BooleanField(default=False, help_text='Check this field if there is a problem with this recruiter which only be resolved later or by somebody else. Uncheck as soon as the problem is resolved. If the problem is of permanent nature and no further action is needed, leave it unchecked and lower the rating bellow accordingly.', verbose_name='Problem')),
                ('rating', models.IntegerField(default=5, help_text='5 = ordinary (modestly good), 0 = hopelessly bad 10 = excelent much above average', verbose_name='Rating', choices=[(0, b'0'), (1, b'1'), (2, b'2'), (3, b'3'), (4, b'4'), (5, b'5'), (6, b'6'), (7, b'7'), (8, b'8'), (9, b'9'), (10, b'10')])),
                ('campaigns', models.ManyToManyField(help_text='Associated campaigns', to='aklub.Campaign', blank=True)),
            ],
            options={
                'verbose_name': 'Recruiter',
                'verbose_name_plural': 'Recruiters',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TaxConfirmation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('year', models.PositiveIntegerField()),
                ('amount', models.PositiveIntegerField(default=0)),
                ('file', models.FileField(storage=aklub.models.OverwriteStorage(), upload_to=aklub.models.confirmation_upload_to)),
            ],
            options={
                'verbose_name': 'Tax confirmation',
                'verbose_name_plural': 'Tax confirmations',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title_before', models.CharField(max_length=15, verbose_name='Title before name', blank=True)),
                ('firstname', models.CharField(max_length=80, verbose_name='First name')),
                ('surname', models.CharField(max_length=80, verbose_name='Surname')),
                ('title_after', models.CharField(max_length=15, verbose_name='Title after name', blank=True)),
                ('sex', models.CharField(max_length=50, verbose_name='Gender', choices=[(b'male', 'Male'), (b'female', 'Female'), (b'unknown', 'Unknown')])),
                ('addressment', models.CharField(max_length=40, verbose_name='Addressment in letter', blank=True)),
                ('addressment_on_envelope', models.CharField(max_length=40, verbose_name='Addressment on envelope', blank=True)),
                ('language', models.CharField(default=b'cs', help_text='This is the language which will be used to communicate with this user. The system will send emails in this language and administrators will use this language in phone calls and personal contacts.', max_length=50, verbose_name='Language', choices=[(b'cs', 'Czech'), (b'en', 'English')])),
                ('email', models.CharField(max_length=40, verbose_name='Email', blank=True)),
                ('telephone', models.CharField(max_length=30, verbose_name='Telephone', blank=True)),
                ('street', models.CharField(max_length=80, verbose_name='Street and number', blank=True)),
                ('city', models.CharField(max_length=40, verbose_name='City', blank=True)),
                ('country', models.CharField(default='\u010cesk\xe1 republika', max_length=40, verbose_name='Country', blank=True)),
                ('zip_code', models.CharField(max_length=10, verbose_name='ZIP Code', blank=True)),
                ('different_correspondence_address', models.BooleanField(default=False, help_text='User has different correspondence address', verbose_name='Different correspondence address')),
                ('knows_us_from', models.CharField(max_length=80, verbose_name='Where does he/she know us from?', blank=True)),
                ('why_supports', models.TextField(max_length=500, verbose_name='Why does he/she support us?', blank=True)),
                ('field_of_work', models.CharField(help_text=b'His/her area of expertise and/or interest', max_length=80, verbose_name='Field of work', blank=True)),
                ('source', models.CharField(help_text='How did he contact us / became a member? In direct dialog, please distinguish between partial form (he still needs to send a permanent order into his bank) and full form (we are going to submit his form directly into bank, no further action is needed from him).', max_length=80, verbose_name='Source', choices=[(b'web', 'Web form'), (b'direct-dialogue-partial-form', 'Direct dialogue -- partial form (not automatic in bank)'), (b'direct-dialogue-full-form', 'Direct dialogue -- full form (automatic in bank)'), (b'telephone-call', 'Telephonic call'), (b'personal', 'Personal recommendation'), (b'other', 'Another form of contact')])),
                ('additional_information', models.TextField(max_length=500, verbose_name='Additional information', blank=True)),
                ('variable_symbol', models.CharField(default=b'', max_length=30, verbose_name='Variable symbol')),
                ('registered_support', models.DateTimeField(default=datetime.datetime(2014, 9, 5, 11, 49, 17, 639919), help_text='When did this user register to support us', verbose_name='Registered support', blank=True)),
                ('exceptional_membership', models.BooleanField(default=False, help_text='In special cases, people can become members of the club even if they do not pay any money. This should be justified in the note.', verbose_name='Exceptional membership')),
                ('regular_payments', models.BooleanField(default=False, help_text='Is this user registered for regular payments?', verbose_name='Regular payments')),
                ('old_account', models.BooleanField(default=False, help_text='User has old account', verbose_name='Old account')),
                ('regular_amount', models.PositiveIntegerField(null=True, verbose_name='Regularly (amount)', blank=True)),
                ('regular_frequency', models.CharField(blank=True, max_length=20, null=True, verbose_name='Frequency of regular payments', choices=[(b'monthly', 'Monthly'), (b'quaterly', 'Quaterly'), (b'biannually', 'Bianually'), (b'annually', 'Anually')])),
                ('expected_date_of_first_payment', models.DateField(help_text=b'When should the first payment arrive on our account', null=True, verbose_name='Expected date of first payment', blank=True)),
                ('other_support', models.TextField(help_text='If the user supports us in other ways, please specify here.', max_length=500, verbose_name='Other support', blank=True)),
                ('public', models.BooleanField(default=True, verbose_name='Publish my name in the list of supporters')),
                ('wished_tax_confirmation', models.BooleanField(default=True, verbose_name='Send tax confirmation')),
                ('wished_welcome_letter', models.BooleanField(default=True, verbose_name='Send welcome letter')),
                ('wished_information', models.BooleanField(default=True, verbose_name='Send regular news via email')),
                ('active', models.BooleanField(default=True, help_text='Is the user active member? Use this field to disable old or temporary users.', verbose_name='Active')),
                ('profile_text', models.TextField(help_text='Tell others why you support Auto*Mat', max_length=3000, null=True, verbose_name='What is your reason?', blank=True)),
                ('profile_picture', stdimage.models.StdImageField(help_text='Your profile picture, which others will see.', upload_to=b'profile-images', null=True, verbose_name='Profile picture', blank=True)),
                ('club_card_available', models.BooleanField(default=False, help_text='Is he entitled to posses a club card?', verbose_name='Club card available')),
                ('club_card_dispatched', models.BooleanField(default=False, help_text='Did we send him the club card already?', verbose_name='Club card dispatched?')),
                ('other_benefits', models.TextField(help_text='Did he receive some other benefits?', max_length=500, verbose_name='Other benefits', blank=True)),
                ('note', models.TextField(max_length=2000, verbose_name='Note for making a boring form more lively', blank=True)),
                ('verified', models.BooleanField(default=False, help_text='Was the the user information verified by a club administrator?', verbose_name='Verified')),
                ('activity_points', models.IntegerField(default=0, help_text='Points for users activity', verbose_name='Activity points')),
                ('campaigns', models.ManyToManyField(help_text='Associated campaigns', related_name=b'members', to='aklub.Campaign', blank=True)),
                ('recruiter', models.ForeignKey(blank=True, to='aklub.Recruiter', null=True)),
                ('verified_by', models.ForeignKey(related_name=b'verified_users', verbose_name='Verified by', blank=True, to='auth.User', null=True)),
            ],
            options={
                'ordering': ('surname', 'firstname'),
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='taxconfirmation',
            name='user',
            field=models.ForeignKey(to='aklub.User'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='taxconfirmation',
            unique_together=set([('user', 'year')]),
        ),
        migrations.AddField(
            model_name='payment',
            name='user',
            field=models.ForeignKey(blank=True, to='aklub.User', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='masscommunication',
            name='send_to_users',
            field=models.ManyToManyField(help_text='All users who should receive the communication', to='aklub.User', verbose_name='send to users', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='communication',
            name='created_by',
            field=models.ForeignKey(related_name=b'created_by_communication', verbose_name='Created by', blank=True, to='auth.User', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='communication',
            name='handled_by',
            field=models.ForeignKey(related_name=b'handled_by_communication', verbose_name='Last handled by', blank=True, to='auth.User', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='communication',
            name='user',
            field=models.ForeignKey(related_name=b'communications', to='aklub.User'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='automaticcommunication',
            name='condition',
            field=models.ForeignKey(to='aklub.Condition'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='automaticcommunication',
            name='sent_to_users',
            field=models.ManyToManyField(help_text='List of users to whom this communication was already sent', to='aklub.User', editable=False, blank=True),
            preserve_default=True,
        ),
        migrations.CreateModel(
            name='StatMemberCountsByMonths',
            fields=[
            ],
            options={
                'db_table': 'aklub_v_member_counts_by_months',
                'managed': False,
                'verbose_name_plural': 'Members by months',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StatPaymentsByMonths',
            fields=[
            ],
            options={
                'db_table': 'aklub_v_payments_by_months',
                'managed': False,
                'verbose_name_plural': 'Payments by months',
            },
            bases=(models.Model,),
        ),
    ]
