# Generated by Django 2.1.5 on 2019-01-21 15:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_grapesjs.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('aklub', '0013_auto_20190121_1345'),
    ]

    operations = [
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_account', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Bank account',
                'verbose_name_plural': 'Bank accounts',
            },
        ),
        migrations.CreateModel(
            name='DonorPaymentChannel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('VS', models.CharField(blank=True, help_text='Variable symbol', max_length=30, null=True, verbose_name='VS')),
                ('registered_support', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='When did this user register to support us', verbose_name='Registered support')),
                ('regular_frequency', models.CharField(blank=True, choices=[('monthly', 'Monthly'), ('quaterly', 'Quaterly'), ('biannually', 'Bianually'), ('annually', 'Anually'), (None, 'Onetime')], max_length=20, null=True, verbose_name='Frequency of regular payments')),
                ('expected_date_of_first_payment', models.DateField(blank=True, help_text='When should the first payment arrive on our account', null=True, verbose_name='Expected date of first payment')),
                ('regular_amount', models.PositiveIntegerField(blank=True, help_text='Minimum yearly payment is 1800 Kƒç', null=True, verbose_name='Regularly (amount)')),
                ('exceptional_membership', models.BooleanField(default=False, help_text='In special cases, people can become members of the club even if they do not pay any money. This should be justified in the note.', verbose_name='Exceptional membership')),
                ('regular_payments', models.CharField(choices=[('regular', 'Regular payments'), ('onetime', 'No regular payments'), ('promise', 'Promise of regular payments')], default='regular', help_text='Is this user registered for regular payments?', max_length=20, verbose_name='Regular payments')),
                ('old_account', models.BooleanField(default=False, help_text='User has old account', verbose_name='Old account')),
                ('other_support', models.TextField(blank=True, help_text='If the user supports us in other ways, please specify here.', max_length=500, verbose_name='Other support')),
                ('bank_account', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='bankaccounts', to='aklub.BankAccount')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='aklub.Payment')),
            ],
            options={
                'verbose_name': 'Donor payment channel',
                'verbose_name_plural': 'Donor payment channels',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(verbose_name='Created')),
                ('terminated', models.DateField(blank=True, null=True, verbose_name='Terminated')),
                ('name', models.CharField(blank=True, help_text='Choose some unique name for this campaign', max_length=100, verbose_name='Name')),
                ('darujme_name', models.CharField(blank=True, default=None, max_length=100, null=True, unique=True, verbose_name='Name in Darujme.cz')),
                ('darujme_project_id', models.IntegerField(blank=True, default=None, null=True, verbose_name='Darujme.cz project ID')),
                ('darujme_api_id', models.IntegerField(blank=True, default=None, null=True, verbose_name='Darujme.cz API ID')),
                ('darujme_api_secret', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Darujme.cz API secret')),
                ('description', models.TextField(blank=True, help_text='Description of this campaign', max_length=3000, verbose_name='Description')),
                ('acquisition_campaign', models.BooleanField(default=False, verbose_name='Acquisition campaign')),
                ('real_yield', models.FloatField(blank=True, help_text='Use if yield differs from counted value', null=True, verbose_name='Real yield')),
                ('slug', models.SlugField(blank=True, default=None, help_text='Identifier of the campaign', max_length=100, null=True, unique=True, verbose_name='Slug')),
                ('enable_signing_petitions', models.BooleanField(default=False, verbose_name='Enable registration through petition/mailing list forms')),
                ('enable_registration', models.BooleanField(default=False, verbose_name='Enable registration through donation forms')),
                ('allow_statistics', models.BooleanField(default=False, verbose_name='Allow statistics exports')),
                ('email_confirmation_redirect', models.URLField(blank=True, null=True)),
                ('donor_payment_channel', models.ManyToManyField(blank=True, related_name='donorpaymentchannels', to='aklub.DonorPaymentChannel')),
                ('result', models.ManyToManyField(blank=True, to='aklub.Result', verbose_name='Acceptable results of communication')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
        ),
        migrations.CreateModel(
            name='Interaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(choices=[('email', 'Email'), ('phonecall', 'Phonecall'), ('mail', 'Mail'), ('personal', 'Personal'), ('internal', 'Internal')], max_length=30, verbose_name='Method')),
                ('type', models.CharField(choices=[('mass', 'Mass'), ('auto', 'Automatic'), ('individual', 'Individual')], default='individual', max_length=30, verbose_name='Type of communication')),
                ('date', models.DateTimeField(verbose_name='Date')),
                ('subject', models.CharField(help_text='The topic of this communication', max_length=130, verbose_name='Subject')),
                ('summary', models.TextField(help_text='Text or summary of this communication', max_length=50000, verbose_name='Text')),
                ('attachment', models.FileField(blank=True, null=True, upload_to='communication-attachments', verbose_name='Attachment')),
                ('note', models.TextField(blank=True, help_text='Internal notes about this communication', max_length=3000, verbose_name='Notes')),
                ('send', models.BooleanField(default=False, help_text='Request sending or resolving this communication. For emails, this means that the email will be immediatelly sent to the user. In other types of communications, someone must handle this manually.', verbose_name='Send / Handle')),
                ('dispatched', models.BooleanField(default=False, help_text='Was this message already sent, communicated and/or resolved?', verbose_name='Dispatched / Done')),
            ],
            options={
                'verbose_name': 'Interaction',
                'verbose_name_plural': 'Interactions',
                'ordering': ['date'],
            },
        ),
        migrations.RemoveField(
            model_name='campaign',
            name='result',
        ),
        migrations.RemoveField(
            model_name='communication',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='communication',
            name='handled_by',
        ),
        migrations.RemoveField(
            model_name='communication',
            name='result',
        ),
        migrations.RemoveField(
            model_name='communication',
            name='user',
        ),
        migrations.AlterField(
            model_name='expense',
            name='campaign',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='aklub.Event', verbose_name='campaign'),
        ),
        migrations.AlterField(
            model_name='masscommunication',
            name='template',
            field=django_grapesjs.models.fields.GrapesJsHtmlField(),
        ),
        migrations.AlterField(
            model_name='recruiter',
            name='campaigns',
            field=models.ManyToManyField(blank=True, help_text='Associated campaigns', to='aklub.Event'),
        ),
        migrations.AlterField(
            model_name='userincampaign',
            name='campaign',
            field=models.ForeignKey(default=None, help_text='Campaign', on_delete=django.db.models.deletion.CASCADE, to='aklub.Event'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='campaigns',
            field=models.ManyToManyField(blank=True, help_text='Associated campaigns', to='aklub.Event'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='sex',
            field=models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('unknown', 'Unknown')], max_length=50, verbose_name='Gender'),
        ),
        migrations.DeleteModel(
            name='Campaign',
        ),
        migrations.DeleteModel(
            name='Communication',
        ),
        migrations.AddField(
            model_name='interaction',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_by_communication', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='interaction',
            name='event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='aklub.Event'),
        ),
        migrations.AddField(
            model_name='interaction',
            name='handled_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='handled_by_communication', to=settings.AUTH_USER_MODEL, verbose_name='Last handled by'),
        ),
        migrations.AddField(
            model_name='interaction',
            name='result',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='aklub.Result', verbose_name='Result of communication'),
        ),
        migrations.AddField(
            model_name='interaction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='donorpaymentchannel',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='userchannels', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='donorpaymentchannel',
            unique_together={('VS', 'bank_account')},
        ),
    ]
